data {
  int<lower=1> M ;
  int<lower=1> N ;
  matrix[N,M] Z ;
  vector[4] priorParams ;
}
parameters {
  /*
  theta       proportion associated with the first pdf
              (The proportion associated with the second pdf is 1-theta.)
  mu1         mean vector for pdf 1
  mu2         mean vector for pdf 2
  tau1        standard deviation vector for pdf 1
  tau2        standard deviation vector for pdf 2
  L_Omega1    Cholesky factorization of the correlation matrix for pdf 1
  L_Omega2    Cholesky factorization of the correlation matrix for pdf 2
  */

  real<lower=0,upper=1> theta ;
  vector[M] mu1 ;
  vector[M] mu2 ;
  vector<lower=0>[M] tau1 ;
  vector<lower=0>[M] tau2 ;
  cholesky_factor_corr[M] L_Omega1 ;
  cholesky_factor_corr[M] L_Omega2 ;
}
transformed parameters {
  /*
  L_Sigma1    Cholesky factorization of the covariance matrix for pdf 1
  L_Sigma2    Cholesky factorization of the covariance matrix for pdf 2
  */
  cholesky_factor_cov[M] L_Sigma1 ;
  cholesky_factor_cov[M] L_Sigma2 ;

  L_Sigma1 <- diag_pre_multiply( tau1, L_Omega1 ) ;
  L_Sigma2 <- diag_pre_multiply( tau2, L_Omega2 ) ;

}
model {
  // prior pdfs ----------

  theta ~ beta( priorParams[1], priorParams[1] ) ;

  mu1 ~ normal( 0, priorParams[2] ) ;
  mu2 ~ normal( 0, priorParams[2] ) ;

  tau1 ~ cauchy( 0, priorParams[3] ) ;
  tau2 ~ cauchy( 0, priorParams[3] ) ;

  // implies L_Omega1 * L_Omega1' ~ lkj_corr(*)
  L_Omega1 ~ lkj_corr_cholesky( priorParams[4] ) ;
  // implies L_Omega2 * L_Omega2' ~ lkj_corr(*)
  L_Omega2 ~ lkj_corr_cholesky( priorParams[4] ) ;

  // likelihood
  for (n in 1:N) {
    increment_log_prob(log_mix( theta,
      multi_normal_cholesky_log( Z[n]', mu1, L_Sigma1 ),
      multi_normal_cholesky_log( Z[n]', mu2, L_Sigma2 )));
  }

}
generated quantities {
  real log_lik ;               // logarithm of the likelihood

  log_lik <- 0. ;
  for (n in 1:N) {
    log_lik <- log_lik + log_mix(theta,
      multi_normal_cholesky_log( Z[n]', mu1, L_Sigma1 ),
      multi_normal_cholesky_log( Z[n]', mu2, L_Sigma2 )) ;
  }
}
